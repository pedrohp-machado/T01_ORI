/* ==========================================================================
 * Universidade Federal de São Carlos - Campus Sorocaba
 * Disciplina: Organização de Recuperação da Informação
 * Prof. Tiago A. Almeida
 *
 * Trabalho 01 - Indexação
 *
 * ========================================================================== *
 * <<< IMPLEMENTE AQUI!!! COPIE E COLE O CONTEÚDO DESTE ARQUIVO NO AVA >>>
 * ========================================================================== */

// Bibliotecas
#include "ORI_T01_HEADER.h"
#include "utils.h"
#include <limits.h>


// Protótipo da função auxiliar para corrigir o bug de fuso horário
void corrigir_timestamp_bug(char* timestamp);


// Arquivos de dados
char ARQUIVO_TREINADORES[TAM_ARQUIVO_TREINADORES];
char ARQUIVO_BOLSOMONS[TAM_ARQUIVO_BOLSOMONS];
char ARQUIVO_BATALHAS[TAM_ARQUIVO_BATALHAS];
char ARQUIVO_RESULTADOS[TAM_ARQUIVO_RESULTADOS];
char ARQUIVO_TREINADOR_POSSUI_BOLSOMON[TAM_ARQUIVO_TREINADOR_POSSUI_BOLSOMON];


// Índices
treinadores_index *treinadores_idx = NULL;
bolsomons_index *bolsomons_idx = NULL;
batalhas_index *batalhas_idx = NULL;
resultados_index* resultados_idx = NULL;
treinador_possui_bolsomon_index *treinador_possui_bolsomon_idx = NULL;
preco_bolsomon_index *preco_bolsomon_idx = NULL;
data_index *data_idx = NULL;
inverted_list treinador_bolsomons_idx = {
        .treinador_bolsomons_secundario_idx = NULL,
        .treinador_bolsomons_primario_idx = NULL,
        .qtd_registros_secundario = 0,
        .qtd_registros_primario = 0,
        .tam_chave_secundaria = TAM_CHAVE_TREINADOR_BOLSOMON_SECUNDARIO_IDX,
        .tam_chave_primaria = TAM_CHAVE_TREINADOR_BOLSOMON_PRIMARIO_IDX,
};


// Contadores
unsigned qtd_registros_treinadores = 0;
unsigned qtd_registros_bolsomons = 0;
unsigned qtd_registros_batalhas = 0;
unsigned qtd_registros_resultados = 0;
unsigned qtd_registros_treinador_possui_bolsomon = 0;

// ---------------- Funções Auxiliares ----------------
void corrigir_timestamp_bug(char* timestamp) {
    struct tm tm_bugada = {0};
    sscanf(timestamp, "%4d%2d%2d%2d%2d", &tm_bugada.tm_year, &tm_bugada.tm_mon, &tm_bugada.tm_mday, &tm_bugada.tm_hour, &tm_bugada.tm_min);
    tm_bugada.tm_year -= 1900;
    tm_bugada.tm_mon -= 1;
    tm_bugada.tm_isdst = -1;
    time_t time_bugado = mktime(&tm_bugada);
    time_bugado -= 28800;
    struct tm tm_corrigida = {0};
    gmtime_r(&time_bugado, &tm_corrigida);
    strftime(timestamp, TAM_DATETIME, "%Y%m%d%H%M", &tm_corrigida);
}

// ---------------- Funções de comparação ----------------

int qsort_treinadores_idx(const void *a, const void *b) {
	return strcmp(((treinadores_index*)a)->id_treinador, ((treinadores_index*)b)->id_treinador);
}
int qsort_bolsomons_idx(const void *a, const void *b) {
	return strcmp(((bolsomons_index*)a)->id_bolsomon, ((bolsomons_index*)b)->id_bolsomon);
}
int qsort_batalhas_idx(const void *a, const void *b) {
	return strcmp(((batalhas_index*)a)->id_batalha, ((batalhas_index*)b)->id_batalha);
}
int qsort_resultados_idx(const void *a, const void *b) {
    int cmp = strcmp(((resultados_index*)a)->id_treinador, ((resultados_index*)b)->id_treinador);
    if (cmp != 0) return cmp;
    return strcmp(((resultados_index*)a)->id_batalha, ((resultados_index*)b)->id_batalha);
}
int qsort_treinador_possui_bolsomon_idx(const void *a, const void *b) {
    int cmp = strcmp(((treinador_possui_bolsomon_index*)a)->id_treinador, ((treinador_possui_bolsomon_index*)b)->id_treinador);
    if (cmp != 0) return cmp;
    return strcmp(((treinador_possui_bolsomon_index*)a)->id_bolsomon, ((treinador_possui_bolsomon_index*)b)->id_bolsomon);
}
int qsort_preco_bolsomon_idx(const void *a, const void *b){
    preco_bolsomon_index *pa = (preco_bolsomon_index*)a;
    preco_bolsomon_index *pb = (preco_bolsomon_index*)b;
    if (pa->preco_bolsobolas < pb->preco_bolsobolas) return -1;
    if (pa->preco_bolsobolas > pb->preco_bolsobolas) return 1;
    return strcmp(pa->id_bolsomon, pb->id_bolsomon);
}
int qsort_data_idx(const void *a, const void *b) {
    int cmp = strcmp(((data_index*)a)->inicio, ((data_index*)b)->inicio);
    if (cmp != 0) return cmp;
    return strcmp(((data_index*)a)->id_batalha, ((data_index*)b)->id_batalha);
}
int qsort_info_treinador(const void *a, const void *b) {
    Info_Treinador *ia = (Info_Treinador*)a;
    Info_Treinador *ib = (Info_Treinador*)b;
    if (ia->vezes_mais_tempo != ib->vezes_mais_tempo) return ib->vezes_mais_tempo - ia->vezes_mais_tempo;
    if (ia->vezes_mais_derrotados != ib->vezes_mais_derrotados) return ib->vezes_mais_derrotados - ia->vezes_mais_derrotados;
    if (ia->vezes_mais_dano != ib->vezes_mais_dano) return ib->vezes_mais_dano - ia->vezes_mais_dano;
    return strcmp(ia->id_treinador, ib->id_treinador);
}
int qsort_treinador_bolsomons_secundario_idx(const void *a, const void *b) {
	return strcmp(((treinador_bolsomons_secundario_index*)a)->chave_secundaria, ((treinador_bolsomons_secundario_index*)b)->chave_secundaria);
}
int qsort_inverted_list_primary_search(const void *a, const void *b) {
    return strcmp((const char*)a, (const char*)b);
}

// ---------------- Criação do índice respectivo ----------------

void criar_treinadores_idx() {
	if(!treinadores_idx) treinadores_idx = malloc(MAX_REGISTROS * sizeof(treinadores_index));
	if(!treinadores_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
	for(unsigned i = 0; i < qtd_registros_treinadores; i++) {
		Treinador t = recuperar_registro_treinador(i);
		treinadores_idx[i].rrn = (strncmp(t.id_treinador, "*|", 2)) ? i : -1;
		strcpy(treinadores_idx[i].id_treinador, t.id_treinador);
	}
	qsort(treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx);
	printf(INDICE_CRIADO, "treinadores_idx");
}
void criar_bolsomons_idx() {
    if (!bolsomons_idx) bolsomons_idx = malloc(MAX_REGISTROS * sizeof(bolsomons_index));
    if (!bolsomons_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
    for (unsigned i = 0; i < qtd_registros_bolsomons; i++) {
        Bolsomon b = recuperar_registro_bolsomon(i);
        bolsomons_idx[i].rrn = i;
        strcpy(bolsomons_idx[i].id_bolsomon, b.id_bolsomon);
    }
    qsort(bolsomons_idx, qtd_registros_bolsomons, sizeof(bolsomons_index), qsort_bolsomons_idx);
    printf(INDICE_CRIADO, "bolsomons_idx");
}
void criar_batalhas_idx() {
    if (!batalhas_idx) batalhas_idx = malloc(MAX_REGISTROS * sizeof(batalhas_index));
    if (!batalhas_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
    for (unsigned i = 0; i < qtd_registros_batalhas; i++) {
        Batalha b = recuperar_registro_batalha(i);
        batalhas_idx[i].rrn = i;
        strcpy(batalhas_idx[i].id_batalha, b.id_batalha);
    }
    qsort(batalhas_idx, qtd_registros_batalhas, sizeof(batalhas_index), qsort_batalhas_idx);
    printf(INDICE_CRIADO, "batalhas_idx");
}
void criar_resultados_idx(){
    if (!resultados_idx) resultados_idx = malloc(MAX_REGISTROS * sizeof(resultados_index));
    if (!resultados_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
    for (unsigned i = 0; i < qtd_registros_resultados; i++) {
        Resultado r = recuperar_registro_resultado(i);
        resultados_idx[i].rrn = i;
        strcpy(resultados_idx[i].id_treinador, r.id_treinador);
        strcpy(resultados_idx[i].id_batalha, r.id_batalha);
    }
    qsort(resultados_idx, qtd_registros_resultados, sizeof(resultados_index), qsort_resultados_idx);
    printf(INDICE_CRIADO, "resultados_idx");
}
void criar_treinador_possui_bolsomon_idx(){
    if (!treinador_possui_bolsomon_idx) treinador_possui_bolsomon_idx = malloc(MAX_REGISTROS * sizeof(treinador_possui_bolsomon_index));
    if (!treinador_possui_bolsomon_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
    for (unsigned i = 0; i < qtd_registros_treinador_possui_bolsomon; i++) {
        TreinadorPossuiBolsomon tpb = recuperar_registro_treinador_possui_bolsomon(i);
        treinador_possui_bolsomon_idx[i].rrn = i;
        strcpy(treinador_possui_bolsomon_idx[i].id_treinador, tpb.id_treinador);
        strcpy(treinador_possui_bolsomon_idx[i].id_bolsomon, tpb.id_bolsomon);
    }
    qsort(treinador_possui_bolsomon_idx, qtd_registros_treinador_possui_bolsomon, sizeof(treinador_possui_bolsomon_index), qsort_treinador_possui_bolsomon_idx);
    printf(INDICE_CRIADO, "treinador_possui_bolsomon_idx");
}
void criar_preco_bolsomon_idx() {
    if (!preco_bolsomon_idx) preco_bolsomon_idx = malloc(MAX_REGISTROS * sizeof(preco_bolsomon_index));
    if (!preco_bolsomon_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
    for (unsigned i = 0; i < qtd_registros_bolsomons; i++) {
        Bolsomon b = recuperar_registro_bolsomon(i);
        strcpy(preco_bolsomon_idx[i].id_bolsomon, b.id_bolsomon);
        preco_bolsomon_idx[i].preco_bolsobolas = b.preco_bolsobolas;
    }
    qsort(preco_bolsomon_idx, qtd_registros_bolsomons, sizeof(preco_bolsomon_index), qsort_preco_bolsomon_idx);
    printf(INDICE_CRIADO, "preco_bolsomon_idx");
}
void criar_data_idx() {
    if (!data_idx) data_idx = malloc(MAX_REGISTROS * sizeof(data_index));
    if (!data_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
    for (unsigned i = 0; i < qtd_registros_batalhas; i++) {
        Batalha b = recuperar_registro_batalha(i);
        strcpy(data_idx[i].id_batalha, b.id_batalha);
        strcpy(data_idx[i].inicio, b.inicio);
    }
    qsort(data_idx, qtd_registros_batalhas, sizeof(data_index), qsort_data_idx);
    printf(INDICE_CRIADO, "data_idx");
}
void criar_treinador_bolsomons_idx() {
    if (!treinador_bolsomons_idx.treinador_bolsomons_secundario_idx) treinador_bolsomons_idx.treinador_bolsomons_secundario_idx = malloc(MAX_REGISTROS * sizeof(treinador_bolsomons_secundario_index));
    if (!treinador_bolsomons_idx.treinador_bolsomons_primario_idx) treinador_bolsomons_idx.treinador_bolsomons_primario_idx = malloc(MAX_REGISTROS * sizeof(treinador_bolsomons_primario_index));
    if (!treinador_bolsomons_idx.treinador_bolsomons_secundario_idx || !treinador_bolsomons_idx.treinador_bolsomons_primario_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
    
    treinador_bolsomons_idx.qtd_registros_primario = 0;
    treinador_bolsomons_idx.qtd_registros_secundario = 0;
    for (unsigned i = 0; i < qtd_registros_treinador_possui_bolsomon; ++i) {
        TreinadorPossuiBolsomon tpb = recuperar_registro_treinador_possui_bolsomon(i);
        bolsomons_index key;
        strcpy(key.id_bolsomon, tpb.id_bolsomon);
        int pos = busca_binaria(&key, bolsomons_idx, qtd_registros_bolsomons, sizeof(bolsomons_index), qsort_bolsomons_idx, false, 0);
        if (pos != -1) {
            Bolsomon b = recuperar_registro_bolsomon(bolsomons_idx[pos].rrn);
            strupr(b.nome);
            inverted_list_insert(b.nome, tpb.id_treinador, &treinador_bolsomons_idx);
        }
    }
    qsort(treinador_bolsomons_idx.treinador_bolsomons_secundario_idx, treinador_bolsomons_idx.qtd_registros_secundario, sizeof(treinador_bolsomons_secundario_index), qsort_treinador_bolsomons_secundario_idx);
    printf(INDICE_CRIADO, "treinador_bolsomons_idx");
}

// ---------------- Recuperação do registro ----------------

Treinador recuperar_registro_treinador(int rrn) {
	Treinador t;
	char buffer[TAM_REGISTRO_TREINADOR + 1], *p;
	strncpy(buffer, ARQUIVO_TREINADORES + (rrn * TAM_REGISTRO_TREINADOR), TAM_REGISTRO_TREINADOR);
	buffer[TAM_REGISTRO_TREINADOR] = '\0';
	p = strtok(buffer, ";"); strcpy(t.id_treinador, p);
	p = strtok(NULL, ";"); strcpy(t.apelido, p);
	p = strtok(NULL, ";"); strcpy(t.cadastro, p);
	p = strtok(NULL, ";"); strcpy(t.premio, p);
	p = strtok(NULL, ";"); t.bolsobolas = atof(p);
	return t;
}
Bolsomon recuperar_registro_bolsomon(int rrn) {
    Bolsomon b;
    char buffer[TAM_REGISTRO_BOLSOMON + 1], *p;
    strncpy(buffer, ARQUIVO_BOLSOMONS + (rrn * TAM_REGISTRO_BOLSOMON), TAM_REGISTRO_BOLSOMON);
    buffer[TAM_REGISTRO_BOLSOMON] = '\0';
    p = strtok(buffer, ";"); strcpy(b.id_bolsomon, p);
    p = strtok(NULL, ";"); strcpy(b.nome, p);
    p = strtok(NULL, ";"); strcpy(b.habilidade, p);
    p = strtok(NULL, ";"); b.preco_bolsobolas = atof(p);
    return b;
}
Batalha recuperar_registro_batalha(int rrn) {
    Batalha b;
    char *p = ARQUIVO_BATALHAS + (rrn * TAM_REGISTRO_BATALHA);
    strncpy(b.id_batalha, p, 8); b.id_batalha[8] = '\0'; p += 8;
    strncpy(b.inicio, p, 12); b.inicio[12] = '\0'; p += 12;
    strncpy(b.duracao, p, 6); b.duracao[6] = '\0'; p += 6;
    strncpy(b.arena, p, 4); b.arena[4] = '\0';
    return b;
}
Resultado recuperar_registro_resultado(int rrn) {
    Resultado r;
    char *p = ARQUIVO_RESULTADOS + (rrn * TAM_REGISTRO_RESULTADO);
    strncpy(r.id_treinador, p, 11); r.id_treinador[11] = '\0'; p += 11;
    strncpy(r.id_batalha, p, 8); r.id_batalha[8] = '\0'; p += 8;
    strncpy(r.id_bolsomon, p, 3); r.id_bolsomon[3] = '\0'; p += 3;
    r.foi_maior_duracao = (*p++ == '1');
    r.foi_mais_derrotas = (*p++ == '1');
    r.foi_mais_dano = (*p == '1');
    return r;
}
TreinadorPossuiBolsomon recuperar_registro_treinador_possui_bolsomon(int rrn) {
    TreinadorPossuiBolsomon tpb;
    char *p = ARQUIVO_TREINADOR_POSSUI_BOLSOMON + (rrn * TAM_REGISTRO_TREINADOR_POSSUI_BOLSOMON);
    strncpy(tpb.id_treinador, p, 11); tpb.id_treinador[11] = '\0';
    strncpy(tpb.id_bolsomon, p + 11, 3); tpb.id_bolsomon[3] = '\0';
    return tpb;
}

// ---------------- Gravação nos arquivos de dados ----------------

void escrever_registro_treinador(Treinador t, int rrn) {
	char buffer[TAM_REGISTRO_TREINADOR + 1], double_str[100];
	buffer[0] = '\0';
	double_str[0] = '\0';
	strcat(buffer, t.id_treinador); strcat(buffer, ";");
	strcat(buffer, t.apelido); strcat(buffer, ";");
	strcat(buffer, t.cadastro); strcat(buffer, ";");
    strcat(buffer, t.premio); strcat(buffer, ";");
	sprintf(double_str, "%013.2lf", t.bolsobolas);
	strcat(buffer, double_str);	strcat(buffer, ";");
	strpadright(buffer, '#', TAM_REGISTRO_TREINADOR);
	strncpy(ARQUIVO_TREINADORES + rrn * TAM_REGISTRO_TREINADOR, buffer, TAM_REGISTRO_TREINADOR);
}
void escrever_registro_bolsomon(Bolsomon b, int rrn) {
    char buffer[TAM_REGISTRO_BOLSOMON + 1], double_str[100];
    buffer[0] = '\0';
    strcat(buffer, b.id_bolsomon); strcat(buffer, ";");
    strcat(buffer, b.nome); strcat(buffer, ";");
    strcat(buffer, b.habilidade); strcat(buffer, ";");
    sprintf(double_str, "%013.2lf", b.preco_bolsobolas);
    strcat(buffer, double_str); strcat(buffer, ";");
    strpadright(buffer, '#', TAM_REGISTRO_BOLSOMON);
    strncpy(ARQUIVO_BOLSOMONS + rrn * TAM_REGISTRO_BOLSOMON, buffer, TAM_REGISTRO_BOLSOMON);
}
void escrever_registro_batalha(Batalha b, int rrn) {
    char buffer[TAM_REGISTRO_BATALHA + 1];
    sprintf(buffer, "%s%s%s%s", b.id_batalha, b.inicio, b.duracao, b.arena);
    strncpy(ARQUIVO_BATALHAS + rrn * TAM_REGISTRO_BATALHA, buffer, TAM_REGISTRO_BATALHA);
}
void escrever_registro_resultado(Resultado r, int rrn) {
    char buffer[TAM_REGISTRO_RESULTADO + 1];
    sprintf(buffer, "%s%s%s%d%d%d", r.id_treinador, r.id_batalha, r.id_bolsomon, r.foi_maior_duracao, r.foi_mais_derrotas, r.foi_mais_dano);
    strncpy(ARQUIVO_RESULTADOS + rrn * TAM_REGISTRO_RESULTADO, buffer, TAM_REGISTRO_RESULTADO);
}
void escrever_registro_treinador_possui_bolsomon(TreinadorPossuiBolsomon tpb, int rrn) {
    char buffer[TAM_REGISTRO_TREINADOR_POSSUI_BOLSOMON + 1];
    sprintf(buffer, "%s%s", tpb.id_treinador, tpb.id_bolsomon);
    strncpy(ARQUIVO_TREINADOR_POSSUI_BOLSOMON + rrn * TAM_REGISTRO_TREINADOR_POSSUI_BOLSOMON, buffer, TAM_REGISTRO_TREINADOR_POSSUI_BOLSOMON);
}

// ---------------- Exibição dos registros ----------------

bool exibir_treinador(int rrn) {
	if(rrn < 0) return false;
	Treinador t = recuperar_registro_treinador(rrn);
	printf("%s, %s, %s, %s, %.2lf\n", t.id_treinador, t.apelido, t.cadastro, t.premio, t.bolsobolas);
	return true;
}
bool exibir_bolsomon(int rrn) {
    if (rrn < 0) return false;
    Bolsomon b = recuperar_registro_bolsomon(rrn);
    printf("%s, %s, %s, %.2lf\n", b.id_bolsomon, b.nome, b.habilidade, b.preco_bolsobolas);
    return true;
}
bool exibir_batalha(int rrn) {
    if (rrn < 0) return false;
    Batalha b = recuperar_registro_batalha(rrn);
    printf("%s, %s, %s, %s\n", b.id_batalha, b.inicio, b.duracao, b.arena);
    return true;
}

// ---------------- Funções principais ----------------

void cadastrar_treinador_menu(char *id_treinador, char *apelido) {
    treinadores_index key;
    strcpy(key.id_treinador, id_treinador);
    int pos = busca_binaria(&key, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, false, 0);
    if (pos != -1 && treinadores_idx[pos].rrn != -1) {
        printf(ERRO_PK_REPETIDA, id_treinador);
        return;
    }
    Treinador t;
    strcpy(t.id_treinador, id_treinador);
    strcpy(t.apelido, apelido);
    current_datetime(t.cadastro);
    corrigir_timestamp_bug(t.cadastro);
    strcpy(t.premio, "000000000000");
    t.bolsobolas = 0.0;
    int rrn = qtd_registros_treinadores;
    escrever_registro_treinador(t, rrn);
    treinadores_idx[qtd_registros_treinadores].rrn = rrn;
    strcpy(treinadores_idx[qtd_registros_treinadores].id_treinador, id_treinador);
    qtd_registros_treinadores++;
    qsort(treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx);
    printf(SUCESSO);
}

void remover_treinador_menu(char *id_treinador) {
    treinadores_index key;
    strcpy(key.id_treinador, id_treinador);
    int pos = busca_binaria(&key, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, false, 0);
    if (pos == -1 || treinadores_idx[pos].rrn == -1) {
        printf(ERRO_REGISTRO_NAO_ENCONTRADO);
        return;
    }
    int rrn = treinadores_idx[pos].rrn;
    strncpy(ARQUIVO_TREINADORES + rrn * TAM_REGISTRO_TREINADOR, "*|", 2);
    treinadores_idx[pos].rrn = -1;
    printf(SUCESSO);
}

void adicionar_bolsobolas_menu(char *id_treinador, double valor) {
	adicionar_bolsobolas(id_treinador, valor, true);
}

void adicionar_bolsobolas(char *id_treinador, double valor, bool flag){
	if (flag && valor <= 0) {
        printf(ERRO_VALOR_INVALIDO);
        return;
    }
    treinadores_index key;
    strcpy(key.id_treinador, id_treinador);
    int pos = busca_binaria(&key, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, false, 0);
    if (pos == -1 || treinadores_idx[pos].rrn == -1) {
        if (flag) printf(ERRO_REGISTRO_NAO_ENCONTRADO);
        return;
    }
    int rrn = treinadores_idx[pos].rrn;
    Treinador t = recuperar_registro_treinador(rrn);
    t.bolsobolas += valor;
    escrever_registro_treinador(t, rrn);
    if (flag) printf(SUCESSO);
}

void cadastrar_bolsomon_menu(char *nome, char *habilidade, double preco) {
    Bolsomon b;
    sprintf(b.id_bolsomon, "%03u", qtd_registros_bolsomons);
    strcpy(b.nome, nome);
    strcpy(b.habilidade, habilidade);
    b.preco_bolsobolas = preco;
    int rrn = qtd_registros_bolsomons;
    escrever_registro_bolsomon(b, rrn);
    bolsomons_idx[qtd_registros_bolsomons].rrn = rrn;
    strcpy(bolsomons_idx[qtd_registros_bolsomons].id_bolsomon, b.id_bolsomon);
    preco_bolsomon_idx[qtd_registros_bolsomons].preco_bolsobolas = b.preco_bolsobolas;
    strcpy(preco_bolsomon_idx[qtd_registros_bolsomons].id_bolsomon, b.id_bolsomon);
    qtd_registros_bolsomons++;
    qsort(bolsomons_idx, qtd_registros_bolsomons, sizeof(bolsomons_index), qsort_bolsomons_idx);
    qsort(preco_bolsomon_idx, qtd_registros_bolsomons, sizeof(preco_bolsomon_index), qsort_preco_bolsomon_idx);
    printf(SUCESSO);
}

void comprar_bolsomon_menu(char *id_treinador, char *id_bolsomon) {
    treinadores_index t_key;
    strcpy(t_key.id_treinador, id_treinador);
    int t_pos = busca_binaria(&t_key, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, false, 0);
    if (t_pos == -1 || treinadores_idx[t_pos].rrn == -1) {
        printf(ERRO_REGISTRO_NAO_ENCONTRADO);
        return;
    }
    bolsomons_index b_key;
    strcpy(b_key.id_bolsomon, id_bolsomon);
    int b_pos = busca_binaria(&b_key, bolsomons_idx, qtd_registros_bolsomons, sizeof(bolsomons_index), qsort_bolsomons_idx, false, 0);
    if (b_pos == -1) {
        printf(ERRO_REGISTRO_NAO_ENCONTRADO);
        return;
    }
    treinador_possui_bolsomon_index tpb_key;
    strcpy(tpb_key.id_treinador, id_treinador);
    strcpy(tpb_key.id_bolsomon, id_bolsomon);
    if (busca_binaria(&tpb_key, treinador_possui_bolsomon_idx, qtd_registros_treinador_possui_bolsomon, sizeof(treinador_possui_bolsomon_index), qsort_treinador_possui_bolsomon_idx, false, 0) != -1) {
        printf(ERRO_BOLSOMON_REPETIDO, id_treinador, id_bolsomon);
        return;
    }
    Treinador t = recuperar_registro_treinador(treinadores_idx[t_pos].rrn);
    Bolsomon b = recuperar_registro_bolsomon(bolsomons_idx[b_pos].rrn);
    if (t.bolsobolas < b.preco_bolsobolas) {
        printf(ERRO_SALDO_NAO_SUFICIENTE);
        return;
    }
    t.bolsobolas -= b.preco_bolsobolas;
    escrever_registro_treinador(t, treinadores_idx[t_pos].rrn);
    TreinadorPossuiBolsomon tpb;
    strcpy(tpb.id_treinador, id_treinador);
    strcpy(tpb.id_bolsomon, id_bolsomon);
    int new_rrn = qtd_registros_treinador_possui_bolsomon;
    escrever_registro_treinador_possui_bolsomon(tpb, new_rrn);
    treinador_possui_bolsomon_idx[qtd_registros_treinador_possui_bolsomon].rrn = new_rrn;
    strcpy(treinador_possui_bolsomon_idx[qtd_registros_treinador_possui_bolsomon].id_treinador, id_treinador);
    strcpy(treinador_possui_bolsomon_idx[qtd_registros_treinador_possui_bolsomon].id_bolsomon, id_bolsomon);
    qtd_registros_treinador_possui_bolsomon++;
    qsort(treinador_possui_bolsomon_idx, qtd_registros_treinador_possui_bolsomon, sizeof(treinador_possui_bolsomon_index), qsort_treinador_possui_bolsomon_idx);
    strupr(b.nome);
    inverted_list_insert(b.nome, id_treinador, &treinador_bolsomons_idx);
    qsort(treinador_bolsomons_idx.treinador_bolsomons_secundario_idx, treinador_bolsomons_idx.qtd_registros_secundario, sizeof(treinador_bolsomons_secundario_index), qsort_treinador_bolsomons_secundario_idx);
    printf(SUCESSO);
}

void executar_batalha_menu(char *inicio, char *duracao, char *arena, char *id_treinadores_str, char *bolsomons_treinadores_str, char *duracoes_treinadores_str, char *eliminacoes_treinadores_str, char *danos_causados_treinadores_str) {
    char id_treinadores[QTD_MAX_TREINADORES][TAM_ID_TREINADOR];
    char id_bolsomons[QTD_MAX_TREINADORES][TAM_ID_BOLSOMON];
    for (int i = 0; i < QTD_MAX_TREINADORES; ++i) {
        strncpy(id_treinadores[i], id_treinadores_str + i * (TAM_ID_TREINADOR - 1), TAM_ID_TREINADOR - 1);
        id_treinadores[i][TAM_ID_TREINADOR - 1] = '\0';
        strncpy(id_bolsomons[i], bolsomons_treinadores_str + i * (TAM_ID_BOLSOMON - 1), TAM_ID_BOLSOMON - 1);
        id_bolsomons[i][TAM_ID_BOLSOMON - 1] = '\0';
    }
    for (int i = 0; i < QTD_MAX_TREINADORES; ++i) {
        treinadores_index t_key;
        strcpy(t_key.id_treinador, id_treinadores[i]);
        int t_pos = busca_binaria(&t_key, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, false, 0);
        if (t_pos == -1 || treinadores_idx[t_pos].rrn == -1) {
            printf(ERRO_REGISTRO_NAO_ENCONTRADO);
            return;
        }
        treinador_possui_bolsomon_index tpb_key;
        strcpy(tpb_key.id_treinador, id_treinadores[i]);
        strcpy(tpb_key.id_bolsomon, id_bolsomons[i]);
        if (busca_binaria(&tpb_key, treinador_possui_bolsomon_idx, qtd_registros_treinador_possui_bolsomon, sizeof(treinador_possui_bolsomon_index), qsort_treinador_possui_bolsomon_idx, false, 0) == -1) {
            bolsomons_index b_key;
            strcpy(b_key.id_bolsomon, id_bolsomons[i]);
            int b_pos = busca_binaria(&b_key, bolsomons_idx, qtd_registros_bolsomons, sizeof(bolsomons_index), qsort_bolsomons_idx, false, 0);
            char nome_bolsomon[TAM_MAX_NOME_BOLSOMON] = "desconhecido";
            if(b_pos != -1) {
                Bolsomon b = recuperar_registro_bolsomon(bolsomons_idx[b_pos].rrn);
                strcpy(nome_bolsomon, b.nome);
            }
            printf(ERRO_TREINADOR_BOLSOMON, id_treinadores[i], nome_bolsomon);
            return;
        }
    }
    Batalha b;
    sprintf(b.id_batalha, "%08u", qtd_registros_batalhas);
    strcpy(b.inicio, inicio);
    strcpy(b.duracao, duracao);
    strcpy(b.arena, arena);
    escrever_registro_batalha(b, qtd_registros_batalhas);
    batalhas_idx[qtd_registros_batalhas].rrn = qtd_registros_batalhas;
    strcpy(batalhas_idx[qtd_registros_batalhas].id_batalha, b.id_batalha);
    strcpy(data_idx[qtd_registros_batalhas].id_batalha, b.id_batalha);
    strcpy(data_idx[qtd_registros_batalhas].inicio, b.inicio);
    qtd_registros_batalhas++;
    qsort(batalhas_idx, qtd_registros_batalhas, sizeof(batalhas_index), qsort_batalhas_idx);
    qsort(data_idx, qtd_registros_batalhas, sizeof(data_index), qsort_data_idx);

    int maior_duracao = -1, mais_eliminacoes = -1;
    long long mais_dano = -1;
    int count_maior_duracao = 0, count_mais_eliminacoes = 0, count_mais_dano = 0;
    
    int duracoes[QTD_MAX_TREINADORES];
    int eliminacoes[QTD_MAX_TREINADORES];
    long long danos[QTD_MAX_TREINADORES];

    for(int i = 0; i < QTD_MAX_TREINADORES; ++i) {
        char duracao_str[TAM_TIME], eliminacoes_str[TAM_INT_NUMBER], dano_str[TAM_INT_NUMBER];
        strncpy(duracao_str, duracoes_treinadores_str + i * (TAM_TIME-1), TAM_TIME-1); duracao_str[TAM_TIME-1] = '\0';
        strncpy(eliminacoes_str, eliminacoes_treinadores_str + i * (TAM_INT_NUMBER-1), TAM_INT_NUMBER-1); eliminacoes_str[TAM_INT_NUMBER-1] = '\0';
        strncpy(dano_str, danos_causados_treinadores_str + i * (TAM_INT_NUMBER-1), TAM_INT_NUMBER-1); dano_str[TAM_INT_NUMBER-1] = '\0';
        duracoes[i] = atoi(duracao_str);
        eliminacoes[i] = atoi(eliminacoes_str);
        danos[i] = atoll(dano_str);
        if(duracoes[i] > maior_duracao) maior_duracao = duracoes[i];
        if(eliminacoes[i] > mais_eliminacoes) mais_eliminacoes = eliminacoes[i];
        if(danos[i] > mais_dano) mais_dano = danos[i];
    }

    for(int i = 0; i < QTD_MAX_TREINADORES; ++i) {
        if(duracoes[i] == maior_duracao) count_maior_duracao++;
        if(eliminacoes[i] == mais_eliminacoes) count_mais_eliminacoes++;
        if(danos[i] == mais_dano) count_mais_dano++;
    }
    
    for (int i = 0; i < QTD_MAX_TREINADORES; ++i) {
        Resultado r;
        strcpy(r.id_treinador, id_treinadores[i]);
        strcpy(r.id_batalha, b.id_batalha);
        strcpy(r.id_bolsomon, id_bolsomons[i]);
        r.foi_maior_duracao = (count_maior_duracao == 1 && duracoes[i] == maior_duracao);
        r.foi_mais_derrotas = (count_mais_eliminacoes == 1 && eliminacoes[i] == mais_eliminacoes);
        r.foi_mais_dano = (count_mais_dano == 1 && danos[i] == mais_dano);
        
        escrever_registro_resultado(r, qtd_registros_resultados);
        resultados_idx[qtd_registros_resultados].rrn = qtd_registros_resultados;
        strcpy(resultados_idx[qtd_registros_resultados].id_treinador, r.id_treinador);
        strcpy(resultados_idx[qtd_registros_resultados].id_batalha, r.id_batalha);
        qtd_registros_resultados++;
    }
    qsort(resultados_idx, qtd_registros_resultados, sizeof(resultados_index), qsort_resultados_idx);
    printf(SUCESSO);
}

void recompensar_campeao_menu(char *data_inicio, char *data_fim, double premio) {
    Info_Treinador placares[MAX_REGISTROS] = {0};
    int qtd_placares = 0;
    char participantes_periodo[MAX_REGISTROS][TAM_ID_TREINADOR];
    int qtd_participantes = 0;

    data_index key;
    strcpy(key.inicio, data_inicio);
    int start_pos = busca_binaria(&key, data_idx, qtd_registros_batalhas, sizeof(data_index), qsort_data_idx, false, 1);
    if (start_pos < 0) start_pos = 0;

    for (unsigned i = start_pos; i < qtd_registros_batalhas; ++i) {
        if (strcmp(data_idx[i].inicio, data_fim) > 0) break;
        
        for (unsigned j = 0; j < qtd_registros_resultados; ++j) {
            if (strcmp(resultados_idx[j].id_batalha, data_idx[i].id_batalha) == 0) {
                Resultado r = recuperar_registro_resultado(resultados_idx[j].rrn);
                
                bool participante_existe = false;
                for(int k = 0; k < qtd_participantes; k++) {
                    if(strcmp(participantes_periodo[k], r.id_treinador) == 0) {
                        participante_existe = true;
                        break;
                    }
                }
                if(!participante_existe) {
                    strcpy(participantes_periodo[qtd_participantes], r.id_treinador);
                    qtd_participantes++;
                }
            }
        }
    }

    for (int i = 0; i < qtd_participantes; i++) {
        strcpy(placares[i].id_treinador, participantes_periodo[i]);
        qtd_placares++;
    }

    for (unsigned i = start_pos; i < qtd_registros_batalhas; ++i) {
        if (strcmp(data_idx[i].inicio, data_fim) > 0) break;
        for (unsigned j = 0; j < qtd_registros_resultados; ++j) {
            if (strcmp(resultados_idx[j].id_batalha, data_idx[i].id_batalha) == 0) {
                Resultado r = recuperar_registro_resultado(resultados_idx[j].rrn);
                for (int k = 0; k < qtd_placares; ++k) {
                    if (strcmp(placares[k].id_treinador, r.id_treinador) == 0) {
                        if (r.foi_maior_duracao) placares[k].vezes_mais_tempo++;
                        if (r.foi_mais_derrotas) placares[k].vezes_mais_derrotados++;
                        if (r.foi_mais_dano) placares[k].vezes_mais_dano++;
                        break;
                    }
                }
            }
        }
    }

    if (qtd_placares == 0) return;
    qsort(placares, qtd_placares, sizeof(Info_Treinador), qsort_info_treinador);

    int DEBUG = 1;
    if (DEBUG) {
        printf("\n// --- DEBUG: RECOMPENSAR_CAMPEAO ---\n");
        printf("// DEBUG: Placar Final Ordenado (Top 5):\n");
        for (int i = 0; i < qtd_placares && i < 5; ++i) {
            printf("// DEBUG: Posição %d: ID=%s, Tempo=%d, Derrotas=%d, Dano=%d\n",
                i + 1,
                placares[i].id_treinador,
                placares[i].vezes_mais_tempo,
                placares[i].vezes_mais_derrotados,
                placares[i].vezes_mais_dano);
        }
        printf("// --- FIM DO DEBUG ---\n\n");
    }
    
    int campeao_idx = 0;
    while(campeao_idx < qtd_placares) {
        treinadores_index t_key;
        strcpy(t_key.id_treinador, placares[campeao_idx].id_treinador);
        int t_pos = busca_binaria(&t_key, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, false, 0);

        if (t_pos != -1 && treinadores_idx[t_pos].rrn != -1) {
            if (campeao_idx > 0) {
                printf(ERRO_TREINADOR_REMOVIDO, premio, placares[campeao_idx].id_treinador, placares[campeao_idx].vezes_mais_tempo, placares[campeao_idx].vezes_mais_derrotados);
            } else {
                printf(CONCEDER_PREMIO, placares[campeao_idx].id_treinador, placares[campeao_idx].vezes_mais_tempo, placares[campeao_idx].vezes_mais_derrotados, premio);
            }
            
            Treinador t = recuperar_registro_treinador(treinadores_idx[t_pos].rrn);
            t.bolsobolas += premio;
            strncpy(t.premio, data_fim, TAM_DATETIME - 1);
            t.premio[TAM_DATETIME - 1] = '\0';
            escrever_registro_treinador(t, treinadores_idx[t_pos].rrn);
            return;
        }
        campeao_idx++;
    }
}

// ---------------- Busca pelo índice ----------------

void buscar_treinador_id_menu(char *id_treinador) {
	treinadores_index index;
	strcpy(index.id_treinador, id_treinador);
	int found = busca_binaria((void*)&index, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, true, 0);
	if(found == -1 || treinadores_idx[found].rrn < 0)
		printf(ERRO_REGISTRO_NAO_ENCONTRADO);
	else
		exibir_treinador(treinadores_idx[found].rrn);
}
void buscar_bolsomon_id_menu(char *id_bolsomon) {
    bolsomons_index index;
    strcpy(index.id_bolsomon, id_bolsomon);
    int found = busca_binaria((void*)&index, bolsomons_idx, qtd_registros_bolsomons, sizeof(bolsomons_index), qsort_bolsomons_idx, true, 0);
    if(found == -1)
        printf(ERRO_REGISTRO_NAO_ENCONTRADO);
    else
        exibir_bolsomon(bolsomons_idx[found].rrn);
}
void buscar_batalha_id_menu(char *id_batalha) {
    batalhas_index index;
    strcpy(index.id_batalha, id_batalha);
    int found = busca_binaria((void*)&index, batalhas_idx, qtd_registros_batalhas, sizeof(batalhas_index), qsort_batalhas_idx, true, 0);
    if(found == -1)
        printf(ERRO_REGISTRO_NAO_ENCONTRADO);
    else
        exibir_batalha(batalhas_idx[found].rrn);
}

// ---------------- Listagem dos registros ----------------

void listar_treinadores_id_menu() {
    bool found_any = false;
	for(unsigned int i = 0; i < qtd_registros_treinadores; i++) {
        if(treinadores_idx[i].rrn != -1) {
		    exibir_treinador(treinadores_idx[i].rrn);
            found_any = true;
        }
    }
    if (!found_any) printf(AVISO_NENHUM_REGISTRO_ENCONTRADO);
}

void listar_treinadores_bolsomons_menu(char *bolsomon){
    char nome_upper[TAM_MAX_NOME_BOLSOMON];
    strcpy(nome_upper, bolsomon);
    strupr(nome_upper);
    int start_node;
    if (!inverted_list_secondary_search(&start_node, true, nome_upper, &treinador_bolsomons_idx)) {
        printf(AVISO_NENHUM_REGISTRO_ENCONTRADO);
        return;
    }
    char result[MAX_REGISTROS][TAM_CHAVE_TREINADOR_BOLSOMON_PRIMARIO_IDX];
    int count = inverted_list_primary_search(result, true, start_node, NULL, &treinador_bolsomons_idx);
    if (count == 0) {
         printf(AVISO_NENHUM_REGISTRO_ENCONTRADO);
         return;
    }
    qsort(result, count, sizeof(result[0]), qsort_inverted_list_primary_search);
    bool found_any = false;
    for (int i = 0; i < count; i++) {
        treinadores_index key;
        strcpy(key.id_treinador, result[i]);
        int pos = busca_binaria(&key, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, false, 0);
        if (pos != -1 && treinadores_idx[pos].rrn != -1) {
            exibir_treinador(treinadores_idx[pos].rrn);
            found_any = true;
        }
    }
    if (!found_any) printf(AVISO_NENHUM_REGISTRO_ENCONTRADO);
}

void listar_bolsomons_compra_menu(char *id_treinador) {
    treinadores_index key;
    strcpy(key.id_treinador, id_treinador);
    int pos = busca_binaria(&key, treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx, false, 0);
    if (pos == -1 || treinadores_idx[pos].rrn == -1) {
        printf(ERRO_REGISTRO_NAO_ENCONTRADO);
        return;
    }
    Treinador t = recuperar_registro_treinador(treinadores_idx[pos].rrn);
    bool found_any = false;
    for (unsigned i = 0; i < qtd_registros_bolsomons; ++i) {
        if (preco_bolsomon_idx[i].preco_bolsobolas > t.bolsobolas) {
            break;
        }
        bolsomons_index b_key;
        strcpy(b_key.id_bolsomon, preco_bolsomon_idx[i].id_bolsomon);
        int b_pos = busca_binaria(&b_key, bolsomons_idx, qtd_registros_bolsomons, sizeof(bolsomons_index), qsort_bolsomons_idx, false, 0);
        if (b_pos != -1) {
            exibir_bolsomon(bolsomons_idx[b_pos].rrn);
            found_any = true;
        }
    }
    if (!found_any) printf(AVISO_NENHUM_REGISTRO_ENCONTRADO);
}

void listar_batalhas_periodo_menu(char *data_inicio, char *data_fim) {
    data_index key;
    strcpy(key.inicio, data_inicio);
    int start_pos = busca_binaria(&key, data_idx, qtd_registros_batalhas, sizeof(data_index), qsort_data_idx, true, 1);
    if (start_pos >= (int)qtd_registros_batalhas || start_pos < 0) {
        printf(AVISO_NENHUM_REGISTRO_ENCONTRADO);
        return;
    }
    bool found_any = false;
    for (unsigned i = start_pos; i < qtd_registros_batalhas; ++i) {
        if (strcmp(data_idx[i].inicio, data_fim) > 0) break;
        batalhas_index b_key;
        strcpy(b_key.id_batalha, data_idx[i].id_batalha);
        int b_pos = busca_binaria(&b_key, batalhas_idx, qtd_registros_batalhas, sizeof(batalhas_index), qsort_batalhas_idx, true, 0);
        if (b_pos != -1) {
            exibir_batalha(batalhas_idx[b_pos].rrn);
            found_any = true;
        }
    }
    if (!found_any) printf(AVISO_NENHUM_REGISTRO_ENCONTRADO);
}

// ---------------- Exibição dos arquivos de dados ----------------

void imprimir_arquivo_treinadores_menu() {
	if(!qtd_registros_treinadores) { printf(ERRO_ARQUIVO_VAZIO); return; }
	printf("%.*s\n", qtd_registros_treinadores * TAM_REGISTRO_TREINADOR, ARQUIVO_TREINADORES);
}
void imprimir_arquivo_bolsomons_menu() {
    if (!qtd_registros_bolsomons) { printf(ERRO_ARQUIVO_VAZIO); return; }
    printf("%.*s\n", qtd_registros_bolsomons * TAM_REGISTRO_BOLSOMON, ARQUIVO_BOLSOMONS);
}
void imprimir_arquivo_batalhas_menu() {
    if (!qtd_registros_batalhas) { printf(ERRO_ARQUIVO_VAZIO); return; }
    printf("%.*s\n", qtd_registros_batalhas * TAM_REGISTRO_BATALHA, ARQUIVO_BATALHAS);
}
void imprimir_arquivo_resultados_menu() {
    if (!qtd_registros_resultados) { printf(ERRO_ARQUIVO_VAZIO); return; }
    printf("%.*s\n", qtd_registros_resultados * TAM_REGISTRO_RESULTADO, ARQUIVO_RESULTADOS);
}
void imprimir_arquivo_treinador_possui_bolsomon_menu() {
    if (!qtd_registros_treinador_possui_bolsomon) { printf(ERRO_ARQUIVO_VAZIO); return; }
    printf("%.*s\n", qtd_registros_treinador_possui_bolsomon * TAM_REGISTRO_TREINADOR_POSSUI_BOLSOMON, ARQUIVO_TREINADOR_POSSUI_BOLSOMON);
}

// ---------------- Exibição dos índices ----------------

void imprimir_treinadores_idx_menu() {
	if(!qtd_registros_treinadores) { printf(ERRO_ARQUIVO_VAZIO); return; }
	for(unsigned i = 0; i < qtd_registros_treinadores; i++)
		printf("%s, %d\n", treinadores_idx[i].id_treinador, treinadores_idx[i].rrn);
}
void imprimir_bolsomons_idx_menu() {
    if (!qtd_registros_bolsomons) { printf(ERRO_ARQUIVO_VAZIO); return; }
    for (unsigned i = 0; i < qtd_registros_bolsomons; i++)
        printf("%s, %d\n", bolsomons_idx[i].id_bolsomon, bolsomons_idx[i].rrn);
}
void imprimir_batalhas_idx_menu() {
    if (!qtd_registros_batalhas) { printf(ERRO_ARQUIVO_VAZIO); return; }
    for (unsigned i = 0; i < qtd_registros_batalhas; i++)
        printf("%s, %d\n", batalhas_idx[i].id_batalha, batalhas_idx[i].rrn);
}
void imprimir_resultados_idx_menu() {
    if (!qtd_registros_resultados) { printf(ERRO_ARQUIVO_VAZIO); return; }
    for (unsigned i = 0; i < qtd_registros_resultados; i++)
        printf("%s, %s, %d\n", resultados_idx[i].id_treinador, resultados_idx[i].id_batalha, resultados_idx[i].rrn);
}
void imprimir_treinador_possui_bolsomon_idx_menu() {
    if (!qtd_registros_treinador_possui_bolsomon) { printf(ERRO_ARQUIVO_VAZIO); return; }
    for (unsigned i = 0; i < qtd_registros_treinador_possui_bolsomon; i++)
        printf("%s, %s, %d\n", treinador_possui_bolsomon_idx[i].id_treinador, treinador_possui_bolsomon_idx[i].id_bolsomon, treinador_possui_bolsomon_idx[i].rrn);
}
void imprimir_preco_bolsomon_idx_menu() {
    if (!qtd_registros_bolsomons) { printf(ERRO_ARQUIVO_VAZIO); return; }
    for (unsigned i = 0; i < qtd_registros_bolsomons; i++)
        printf("%.2lf, %s\n", preco_bolsomon_idx[i].preco_bolsobolas, preco_bolsomon_idx[i].id_bolsomon);
}
void imprimir_data_idx_menu() {
    if (!qtd_registros_batalhas) { printf(ERRO_ARQUIVO_VAZIO); return; }
    for (unsigned i = 0; i < qtd_registros_batalhas; i++)
        printf("%s, %s\n", data_idx[i].id_batalha, data_idx[i].inicio);
}
void imprimir_treinador_bolsomons_secundario_idx_menu() {
    if (!treinador_bolsomons_idx.qtd_registros_secundario) { printf(ERRO_ARQUIVO_VAZIO); return; }
    for (unsigned i = 0; i < treinador_bolsomons_idx.qtd_registros_secundario; i++)
        printf("%s, %d\n", treinador_bolsomons_idx.treinador_bolsomons_secundario_idx[i].chave_secundaria, treinador_bolsomons_idx.treinador_bolsomons_secundario_idx[i].primeiro_indice);
}
void imprimir_treinador_bolsomons_primario_idx_menu() {
    if (!treinador_bolsomons_idx.qtd_registros_primario) { printf(ERRO_ARQUIVO_VAZIO); return; }
    for (unsigned i = 0; i < treinador_bolsomons_idx.qtd_registros_primario; i++)
        printf("%s, %d\n", treinador_bolsomons_idx.treinador_bolsomons_primario_idx[i].chave_primaria, treinador_bolsomons_idx.treinador_bolsomons_primario_idx[i].proximo_indice);
}

// ---------------- Liberação de espaço e memória ----------------

void liberar_espaco_menu() {
	char buffer_limpo[TAM_ARQUIVO_TREINADORES];
    unsigned rrn_limpo = 0;
    unsigned qtd_registros_treinadores_original = qtd_registros_treinadores;
    for (unsigned i = 0; i < qtd_registros_treinadores_original; ++i) {
        char* registro_ptr = ARQUIVO_TREINADORES + i * TAM_REGISTRO_TREINADOR;
        if (strncmp(registro_ptr, "*|", 2) != 0) {
            memcpy(buffer_limpo + rrn_limpo * TAM_REGISTRO_TREINADOR, registro_ptr, TAM_REGISTRO_TREINADOR);
            rrn_limpo++;
        }
    }
    memset(ARQUIVO_TREINADORES, 0, TAM_ARQUIVO_TREINADORES);
    memcpy(ARQUIVO_TREINADORES, buffer_limpo, rrn_limpo * TAM_REGISTRO_TREINADOR);
    qtd_registros_treinadores = rrn_limpo;
    if(!treinadores_idx) treinadores_idx = malloc(MAX_REGISTROS * sizeof(treinadores_index));
    if(!treinadores_idx) { printf(ERRO_MEMORIA_INSUFICIENTE); exit(1); }
    for(unsigned i = 0; i < qtd_registros_treinadores; i++) {
        Treinador t = recuperar_registro_treinador(i);
        treinadores_idx[i].rrn = i;
        strcpy(treinadores_idx[i].id_treinador, t.id_treinador);
    }
    qsort(treinadores_idx, qtd_registros_treinadores, sizeof(treinadores_index), qsort_treinadores_idx);
    printf(SUCESSO);
}

void liberar_memoria_menu() {
	free(treinadores_idx);
    free(bolsomons_idx);
    free(batalhas_idx);
    free(resultados_idx);
    free(treinador_possui_bolsomon_idx);
    free(preco_bolsomon_idx);
    free(data_idx);
    free(treinador_bolsomons_idx.treinador_bolsomons_secundario_idx);
    free(treinador_bolsomons_idx.treinador_bolsomons_primario_idx);
}

// ---------------- Manipulação da lista invertida ----------------

void inverted_list_insert(char *chave_secundaria, char *chave_primaria, inverted_list *t) {
    int indice_secundario = -1;
    for (unsigned i = 0; i < t->qtd_registros_secundario; i++) {
        if (strcmp(t->treinador_bolsomons_secundario_idx[i].chave_secundaria, chave_secundaria) == 0) {
            indice_secundario = i;
            break;
        }
    }

    if (indice_secundario != -1) {
        int cabeca_lista = t->treinador_bolsomons_secundario_idx[indice_secundario].primeiro_indice;
        int indice_final;
        inverted_list_primary_search(NULL, false, cabeca_lista, &indice_final, t);
        
        strcpy(t->treinador_bolsomons_primario_idx[t->qtd_registros_primario].chave_primaria, chave_primaria);
        t->treinador_bolsomons_primario_idx[t->qtd_registros_primario].proximo_indice = -1;
        
        t->treinador_bolsomons_primario_idx[indice_final].proximo_indice = t->qtd_registros_primario;
        t->qtd_registros_primario++;
    } else {
        strcpy(t->treinador_bolsomons_secundario_idx[t->qtd_registros_secundario].chave_secundaria, chave_secundaria);
        t->treinador_bolsomons_secundario_idx[t->qtd_registros_secundario].primeiro_indice = t->qtd_registros_primario;
        
        strcpy(t->treinador_bolsomons_primario_idx[t->qtd_registros_primario].chave_primaria, chave_primaria);
        t->treinador_bolsomons_primario_idx[t->qtd_registros_primario].proximo_indice = -1;
        
        t->qtd_registros_secundario++;
        t->qtd_registros_primario++;
    }
}
bool inverted_list_secondary_search(int *result, bool exibir_caminho, char *chave_secundaria, inverted_list *t) {
    treinador_bolsomons_secundario_index key;
    strcpy(key.chave_secundaria, chave_secundaria);
    int pos = busca_binaria(&key, t->treinador_bolsomons_secundario_idx, t->qtd_registros_secundario, sizeof(treinador_bolsomons_secundario_index), qsort_treinador_bolsomons_secundario_idx, exibir_caminho, 0);
    if (pos != -1) {
        if (result) *result = t->treinador_bolsomons_secundario_idx[pos].primeiro_indice;
        return true;
    }
    return false;
}
int inverted_list_primary_search(char result[][TAM_CHAVE_TREINADOR_BOLSOMON_PRIMARIO_IDX], bool exibir_caminho, int indice, int *indice_final, inverted_list *t) {
    if (exibir_caminho) printf("%s:", REGS_PERCORRIDOS);
    int count = 0;
    int atual = indice;
    while (atual != -1) {
        if (exibir_caminho) printf(" %d", atual);
        if (result) strcpy(result[count], t->treinador_bolsomons_primario_idx[atual].chave_primaria);
        if (indice_final && t->treinador_bolsomons_primario_idx[atual].proximo_indice == -1) *indice_final = atual;
        count++;
        atual = t->treinador_bolsomons_primario_idx[atual].proximo_indice;
    }
    if(exibir_caminho) printf("\n");
    return count;
}

// ---------------- Busca binária ----------------

int busca_binaria(const void *key, const void *base0, size_t nmemb, size_t size, int (*compar)(const void *, const void *), bool exibir_caminho, int retorno_se_nao_encontrado) {
    if (nmemb == 0) {
        if (exibir_caminho) { printf("%s:\n", REGS_PERCORRIDOS); }
        return -1;
    }
    int low = 0, high = nmemb - 1;
    if (exibir_caminho) printf("%s:", REGS_PERCORRIDOS);
    while (low <= high) {
        int mid = low + (high - low + 1) / 2;
        if (exibir_caminho) printf(" %d", mid);
        const void *p = (const char *)base0 + mid * size;
        int cmp = compar(key, p);
        if (cmp == 0) {
            if (exibir_caminho) printf("\n");
            return mid;
        } else if (cmp < 0) {
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    if (exibir_caminho) printf("\n");
    if (retorno_se_nao_encontrado == 0) return -1;
    if (retorno_se_nao_encontrado == -1) {
        if (high < 0) return -1;
        return high;
    }
    if (retorno_se_nao_encontrado == 1) {
        if (low >= (int)nmemb) return (int)nmemb;
        return low;
    }
    return -1;
}

// ---------------- Funções SET de arquivos ----------------

void set_arquivo_treinadores(char* novos_dados, size_t tamanho){
    memcpy(ARQUIVO_TREINADORES, novos_dados, tamanho);
    qtd_registros_treinadores = tamanho / TAM_REGISTRO_TREINADOR;
}
void set_arquivo_bolsomons(char* novos_dados, size_t tamanho){
    memcpy(ARQUIVO_BOLSOMONS, novos_dados, tamanho);
    qtd_registros_bolsomons = tamanho / TAM_REGISTRO_BOLSOMON;
}
void set_arquivo_batalhas(char* novos_dados, size_t tamanho){
    memcpy(ARQUIVO_BATALHAS, novos_dados, tamanho);
    qtd_registros_batalhas = tamanho / TAM_REGISTRO_BATALHA;
}
void set_arquivo_resultados(char* novos_dados, size_t tamanho){
    memcpy(ARQUIVO_RESULTADOS, novos_dados, tamanho);
    qtd_registros_resultados = tamanho / TAM_REGISTRO_RESULTADO;
}
void set_arquivo_treinador_possui_bolsomon(char* novos_dados, size_t tamanho){
    memcpy(ARQUIVO_TREINADOR_POSSUI_BOLSOMON, novos_dados, tamanho);
    qtd_registros_treinador_possui_bolsomon = tamanho / TAM_REGISTRO_TREINADOR_POSSUI_BOLSOMON;
}

// ---------------- Implementação das suas próprias funções auxiliares ----------------